package aStarAlg;

import java.util.List;
import java.util.ArrayList;

public class benchMark {
	private static List<Map> maps = new ArrayList<Map>();
	private static List<aStarSearch> astarlist = new ArrayList<aStarSearch>();
	private static List<aStarWeightedSearch> astarweightedlist = new ArrayList<aStarWeightedSearch>();
	private static List<uniformCostSearch> uniformlist = new ArrayList<uniformCostSearch>();
	
	public int a_pathlength=0;
	public int aw_pathlength=0;
	public int u_pathlength=0;
	
	public long a_runningtime=0;
	public long aw_runningtime=0;
	public long u_runningtime=0;
	
	public int a_pathLength=0;
	public int aw_pathLength=0;
	public int u_pathLength0;
	
	public double a_pathCost=0;
	public double aw_pathCost=0;
	public double u_pathCost=0;
	
	public int a_nodeExpanded=0;
	public int aw_nodeExpanded=0;
	public int u_nodeExpanded=0;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		for (int i = 0;i < 5;i++){
			for (int j = 0;j<10;j++){
				maps.add(new Map());
				maps.get(maps.size()-1).Read_map((i+1)+"_"+(j+1)+".txt");
				aStarSearch search_a = new aStarSearch(maps.get(maps.size()-1),maps.get(maps.size()-1).Start,maps.get(maps.size()-1).Goal);
				aStarWeightedSearch search_aw = new aStarWeightedSearch(maps.get(maps.size()-1),maps.get(maps.size()-1).Start,maps.get(maps.size()-1).Goal,1.25);
				uniformCostSearch search_u = new uniformCostSearch(maps.get(maps.size()-1),maps.get(maps.size()-1).Start,maps.get(maps.size()-1).Goal);
				search_a.findPath();
				search_aw.findPath();
				search_u.findPath();
				astarlist.add(search_a);
				astarweightedlist.add(search_aw);
				uniformlist.add(search_u);
			}
		}

		for (int i = 0;i<50;i++){
			a
		}
		
		
	}
	

}
